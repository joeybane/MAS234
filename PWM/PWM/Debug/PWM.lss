
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007be  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006dd  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002be  00000000  00000000  000010cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000076  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z3PWMi>:
#define F_CPU 8000000

//Takes 10ms to run.
void PWM(int dutyCycle)
{
	for (int ii = 0; ii < 100; ii++)
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (ii < dutyCycle)
		{
			PORTB = 0xFF;
  84:	4f ef       	ldi	r20, 0xFF	; 255
//Takes 10ms to run.
void PWM(int dutyCycle)
{
	for (int ii = 0; ii < 100; ii++)
	{
		if (ii < dutyCycle)
  86:	28 17       	cp	r18, r24
  88:	39 07       	cpc	r19, r25
  8a:	14 f4       	brge	.+4      	; 0x90 <_Z3PWMi+0x10>
		{
			PORTB = 0xFF;
  8c:	45 b9       	out	0x05, r20	; 5
  8e:	01 c0       	rjmp	.+2      	; 0x92 <_Z3PWMi+0x12>
		}
		else
		{
			PORTB = 0x00;
  90:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	56 ea       	ldi	r21, 0xA6	; 166
  94:	5a 95       	dec	r21
  96:	f1 f7       	brne	.-4      	; 0x94 <_Z3PWMi+0x14>
  98:	00 c0       	rjmp	.+0      	; 0x9a <_Z3PWMi+0x1a>
#define F_CPU 8000000

//Takes 10ms to run.
void PWM(int dutyCycle)
{
	for (int ii = 0; ii < 100; ii++)
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	24 36       	cpi	r18, 0x64	; 100
  a0:	31 05       	cpc	r19, r1
  a2:	89 f7       	brne	.-30     	; 0x86 <_Z3PWMi+0x6>
		{
			PORTB = 0x00;
		}
		_delay_us(500);
	}
}
  a4:	08 95       	ret

000000a6 <main>:

int main(void)
{
	DDRB = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	
	while (1)
	{
		for (int ii = 0; ii < 100; ii++)
		{
			PWM(ii*ii/100);
  aa:	04 e6       	ldi	r16, 0x64	; 100
  ac:	10 e0       	ldi	r17, 0x00	; 0
{
	DDRB = 0xFF;
	
	while (1)
	{
		for (int ii = 0; ii < 100; ii++)
  ae:	c0 e0       	ldi	r28, 0x00	; 0
  b0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PWM(ii*ii/100);
  b2:	cc 9f       	mul	r28, r28
  b4:	c0 01       	movw	r24, r0
  b6:	cd 9f       	mul	r28, r29
  b8:	90 0d       	add	r25, r0
  ba:	90 0d       	add	r25, r0
  bc:	11 24       	eor	r1, r1
  be:	b8 01       	movw	r22, r16
  c0:	0e 94 7a 00 	call	0xf4	; 0xf4 <__divmodhi4>
  c4:	cb 01       	movw	r24, r22
  c6:	0e 94 40 00 	call	0x80	; 0x80 <_Z3PWMi>
{
	DDRB = 0xFF;
	
	while (1)
	{
		for (int ii = 0; ii < 100; ii++)
  ca:	21 96       	adiw	r28, 0x01	; 1
  cc:	c4 36       	cpi	r28, 0x64	; 100
  ce:	d1 05       	cpc	r29, r1
  d0:	81 f7       	brne	.-32     	; 0xb2 <main+0xc>
  d2:	c4 e6       	ldi	r28, 0x64	; 100
  d4:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PWM(ii*ii/100);
		}
		for (int ii = 100; ii > 0; ii--)
		{
			PWM(ii*ii/100);
  d6:	cc 9f       	mul	r28, r28
  d8:	c0 01       	movw	r24, r0
  da:	cd 9f       	mul	r28, r29
  dc:	90 0d       	add	r25, r0
  de:	90 0d       	add	r25, r0
  e0:	11 24       	eor	r1, r1
  e2:	b8 01       	movw	r22, r16
  e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <__divmodhi4>
  e8:	cb 01       	movw	r24, r22
  ea:	0e 94 40 00 	call	0x80	; 0x80 <_Z3PWMi>
	{
		for (int ii = 0; ii < 100; ii++)
		{
			PWM(ii*ii/100);
		}
		for (int ii = 100; ii > 0; ii--)
  ee:	21 97       	sbiw	r28, 0x01	; 1
  f0:	91 f7       	brne	.-28     	; 0xd6 <main+0x30>
  f2:	dd cf       	rjmp	.-70     	; 0xae <main+0x8>

000000f4 <__divmodhi4>:
  f4:	97 fb       	bst	r25, 7
  f6:	07 2e       	mov	r0, r23
  f8:	16 f4       	brtc	.+4      	; 0xfe <__divmodhi4+0xa>
  fa:	00 94       	com	r0
  fc:	07 d0       	rcall	.+14     	; 0x10c <__divmodhi4_neg1>
  fe:	77 fd       	sbrc	r23, 7
 100:	09 d0       	rcall	.+18     	; 0x114 <__divmodhi4_neg2>
 102:	0e 94 8e 00 	call	0x11c	; 0x11c <__udivmodhi4>
 106:	07 fc       	sbrc	r0, 7
 108:	05 d0       	rcall	.+10     	; 0x114 <__divmodhi4_neg2>
 10a:	3e f4       	brtc	.+14     	; 0x11a <__divmodhi4_exit>

0000010c <__divmodhi4_neg1>:
 10c:	90 95       	com	r25
 10e:	81 95       	neg	r24
 110:	9f 4f       	sbci	r25, 0xFF	; 255
 112:	08 95       	ret

00000114 <__divmodhi4_neg2>:
 114:	70 95       	com	r23
 116:	61 95       	neg	r22
 118:	7f 4f       	sbci	r23, 0xFF	; 255

0000011a <__divmodhi4_exit>:
 11a:	08 95       	ret

0000011c <__udivmodhi4>:
 11c:	aa 1b       	sub	r26, r26
 11e:	bb 1b       	sub	r27, r27
 120:	51 e1       	ldi	r21, 0x11	; 17
 122:	07 c0       	rjmp	.+14     	; 0x132 <__udivmodhi4_ep>

00000124 <__udivmodhi4_loop>:
 124:	aa 1f       	adc	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	a6 17       	cp	r26, r22
 12a:	b7 07       	cpc	r27, r23
 12c:	10 f0       	brcs	.+4      	; 0x132 <__udivmodhi4_ep>
 12e:	a6 1b       	sub	r26, r22
 130:	b7 0b       	sbc	r27, r23

00000132 <__udivmodhi4_ep>:
 132:	88 1f       	adc	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	5a 95       	dec	r21
 138:	a9 f7       	brne	.-22     	; 0x124 <__udivmodhi4_loop>
 13a:	80 95       	com	r24
 13c:	90 95       	com	r25
 13e:	bc 01       	movw	r22, r24
 140:	cd 01       	movw	r24, r26
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
